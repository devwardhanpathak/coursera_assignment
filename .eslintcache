[{"E:\\dev\\coursera\\react\\coursera_project\\src\\index.js":"1","E:\\dev\\coursera\\react\\coursera_project\\src\\reportWebVitals.js":"2","E:\\dev\\coursera\\react\\coursera_project\\src\\App.js":"3","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\MenuComponent.jsx":"4","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\dishes.js":"5","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\MainComponent.js":"6","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\DishDetailComponent.js":"7","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\DishdetailComponent.js":"8","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\HeaderComponent.js":"9","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\FooterComponent.js":"10","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\HomeComponent.js":"11","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\ContactComponent.js":"12","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\comments.js":"13","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\promotions.js":"14","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\leaders.js":"15","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\AboutComponent.js":"16","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\configureStore.js":"17","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\dishes.js":"18","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\leaders.js":"19","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\promotions.js":"20","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\comments.js":"21"},{"size":308,"mtime":1611036546894,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":556,"mtime":1611549708326,"results":"25","hashOfConfig":"23"},{"size":1380,"mtime":1611206008779,"results":"26","hashOfConfig":"23"},{"size":1614,"mtime":1611116357213,"results":"27","hashOfConfig":"23"},{"size":2246,"mtime":1611551540106,"results":"28","hashOfConfig":"23"},{"size":6334,"mtime":1611571919394,"results":"29","hashOfConfig":"23"},{"size":1710,"mtime":1611036205455,"results":"30","hashOfConfig":"23"},{"size":5153,"mtime":1611374095547,"results":"31","hashOfConfig":"23"},{"size":2806,"mtime":1611207816289,"results":"32","hashOfConfig":"23"},{"size":1121,"mtime":1611116726520,"results":"33","hashOfConfig":"23"},{"size":10735,"mtime":1611559690690,"results":"34","hashOfConfig":"23"},{"size":4927,"mtime":1611114539167,"results":"35","hashOfConfig":"23"},{"size":457,"mtime":1611114569496,"results":"36","hashOfConfig":"23"},{"size":2432,"mtime":1611114586647,"results":"37","hashOfConfig":"23"},{"size":4416,"mtime":1611214688339,"results":"38","hashOfConfig":"23"},{"size":526,"mtime":1611730009140,"results":"39","hashOfConfig":"23"},{"size":182,"mtime":1611729589519,"results":"40","hashOfConfig":"23"},{"size":184,"mtime":1611729690781,"results":"41","hashOfConfig":"23"},{"size":196,"mtime":1611729706487,"results":"42","hashOfConfig":"23"},{"size":188,"mtime":1611729702414,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1r3aw1x",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\dev\\coursera\\react\\coursera_project\\src\\index.js",[],["91","92"],"E:\\dev\\coursera\\react\\coursera_project\\src\\reportWebVitals.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\App.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\MenuComponent.jsx",["93","94"],"import React from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction RenderMenuItem({ dish, onClick }) {\r\n    return (\r\n        <Card>\r\n            <Link to={`/menu/${dish.id}`}>\r\n                <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\r\n                <CardImgOverlay>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                </CardImgOverlay>\r\n            </Link>\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst Menu = props => {\r\n    const menu = props.dishes.map(dish => {\r\n        return (\r\n            <div key={dish.id} className=\"col-12 col-md-5 m-1\">\r\n                <RenderMenuItem dish={dish} />\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb >\r\n                    <BreadcrumbItem><Link to='/Home'>Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>Menu</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>Menu</h3>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                {menu}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Menu;","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\dishes.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\MainComponent.js",["95"],"import React, { Component } from 'react';\r\nimport Home from './HomeComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from \"./FooterComponent\";\r\nimport Menu from './MenuComponent';\r\nimport DishDetail from './DishDetailComponent';\r\nimport Contact from './ContactComponent';\r\nimport About from './AboutComponent';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        dishes: state.dishes,\r\n        comments: state.comments,\r\n        promotions: state.promotions,\r\n        leaders: state.leaders\r\n    }\r\n}\r\n\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const HomePage = () => {\r\n            return (\r\n                <Home\r\n                    dish={this.props.dishes.filter((dish) => dish.featured)[0]}\r\n                    promotion={this.props.promotions.filter((promo) => promo.featured)[0]}\r\n                    leader={this.props.leaders.filter((leader) => leader.featured)[0]}\r\n                />\r\n\r\n            );\r\n        }\r\n\r\n        const DishWithId = ({ match }) => {\r\n            return (\r\n                <DishDetail\r\n                    dish={this.props.dishes.filter(dish => dish.id === parseInt(match.params.dishId, 10))[0]}\r\n                    comments={this.props.comments.filter(comment => comment.dishId === parseInt(match.params.dishId, 10))}\r\n                />\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <Switch>\r\n                    <Route path=\"/home\" component={HomePage} />\r\n                    <Route exact path=\"/menu\" component={() => <Menu dishes={this.props.dishes} />} />\r\n                    <Route path=\"/menu/:dishId\" component={DishWithId} />\r\n                    <Route exact path=\"/contactus\" component={Contact} />\r\n                    <Route exact path=\"/aboutus\" component={() => <About leaders={this.props.leaders} />} />\r\n                    <Redirect to=\"/home\" />\r\n                </Switch>\r\n                <Footer />\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(Main));","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\DishDetailComponent.js",["96","97","98","99"],"import React, { Component } from 'react';\r\nimport {\r\n    Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem, Button,\r\n    Modal, ModalHeader, ModalBody, Row, Col, Label\r\n} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\n\r\nfunction RenderDish({ dish }) {\r\n    return (\r\n        <Card>\r\n            <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\r\n            <CardBody>\r\n                <CardTitle>{dish.name}</CardTitle>\r\n                <CardText>{dish.description}</CardText>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n\r\nfunction RenderComments({ comments }) {\r\n    var commentList = comments.map(comment => {\r\n        return (\r\n            <li key={comment.id} >\r\n                {comment.comment}\r\n                <br /><br />\r\n                    -- {comment.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(comment.date)))}\r\n                <br /><br />\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h4>Comments</h4>\r\n            <ul className=\"list-unstyled\">\r\n                {commentList}\r\n            </ul>\r\n            <CommentForm />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DishDetail = props => {\r\n    if (props.dish) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-md-5 m-1\">\r\n                        <RenderDish dish={props.dish} />\r\n                    </div>\r\n                    <div className=\"col-12 col-md-5 m-1\">\r\n                        <RenderComments comments={props.comments} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DishDetail;\r\n\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\n\r\nexport class CommentForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({ isModalOpen: !this.state.isModalOpen });\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.toggleModal();\r\n\r\n        console.log('comment:', values);\r\n        alert('comment:' + JSON.stringify(values));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button outline onClick={this.toggleModal}>\r\n                    <span className=\"fa fa-pencil fa-lg\"> Submit comment</span>\r\n                </Button>\r\n\r\n                <div className=\"row row-content\">\r\n                    <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                        <ModalHeader toggle={this.toggleModal}> Submit comment</ModalHeader>\r\n                        <ModalBody>\r\n                            <div className=\"col-12 col-md-9\">\r\n                                <LocalForm onSubmit={(values) => this.handleSubmit(values)} >\r\n                                    <Row className=\"form-group\">\r\n                                        <Label htmlFor=\"rating\">Rating</Label>\r\n                                        <Col md={10}>\r\n                                            <Control.select model=\".rating\" name=\"rating\" className=\"form-control\" >\r\n                                                <option>1</option>\r\n                                                <option>2</option>\r\n                                                <option>3</option>\r\n                                                <option>4</option>\r\n                                                <option>5</option>\r\n                                            </Control.select>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Row className=\"form-group\">\r\n                                        <Label htmlFor=\"author\" md={2}>Your name</Label>\r\n                                        <Col md={10}>\r\n                                            <Control.text model=\".author\" id=\"author\" name=\"author\" placeholder=\"Author\" className=\"form-control\" validators={{ required, minLength: minLength(3), maxLength: maxLength(15) }} />\r\n                                            <Errors className=\"text-danger\" model=\".author\" show=\"touched\" messages={{ required: 'Required', minLength: 'Must be greater than 3 characters', maxLength: 'Must be 15 charaters or less' }} />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Row className=\"form-group\">\r\n                                        <Label htmlFor=\"feedback\" md={2}>Your feedback</Label>\r\n                                        <Col md={10}>\r\n                                            <Control.textarea model=\".message\" id=\"message\" name=\"message\" rows=\"6\" className=\"form-control\" validators={{ required }} />\r\n                                            <Errors className=\"text-danger\" model=\".message\" show=\"touched\" messages={{ required: 'Required' }} />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Button type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\r\n                                </LocalForm>\r\n                            </div>\r\n                        </ModalBody>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\DishdetailComponent.js",["100"],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\HeaderComponent.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\FooterComponent.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\HomeComponent.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\ContactComponent.js",["101","102","103","104","105","106","107","108"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Label, Col, Row } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        console.log(\"Current state id:\" + JSON.stringify(values));\r\n        alert(\"Current state id:\" + JSON.stringify(values));\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb >\r\n                        <BreadcrumbItem><Link to='/Home'>Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>ContactUs</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>ContactUs</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send Us Your FeedBack</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 6, offset: 2 }}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" className=\"form-check-input\" name=\"agree\"\r\n                                            />{' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{ size: 3, offset: 1 }}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\" >\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"6\" placeholder=\"Message\" className=\"form-control\"\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 10, offset: 2 }}>\r\n                                    <Button type=\"submit\" color=\"primary\" >Send Feedback</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Contact;","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\comments.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\promotions.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\leaders.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\AboutComponent.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\configureStore.js",["109"],"E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\dishes.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\leaders.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\promotions.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\comments.js",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":2,"column":41,"nodeType":"116","messageId":"117","endLine":2,"endColumn":49},{"ruleId":"114","severity":1,"message":"118","line":2,"column":51,"nodeType":"116","messageId":"117","endLine":2,"endColumn":59},{"ruleId":"119","severity":1,"message":"120","line":24,"column":5,"nodeType":"121","messageId":"122","endLine":26,"endColumn":6},{"ruleId":"114","severity":1,"message":"123","line":3,"column":20,"nodeType":"116","messageId":"117","endLine":3,"endColumn":34},{"ruleId":"124","severity":1,"message":"125","line":123,"column":45,"nodeType":"126","endLine":123,"endColumn":117},{"ruleId":"124","severity":1,"message":"127","line":136,"column":45,"nodeType":"126","endLine":136,"endColumn":226},{"ruleId":"124","severity":1,"message":"128","line":144,"column":45,"nodeType":"126","endLine":144,"endColumn":170},{"ruleId":"114","severity":1,"message":"129","line":55,"column":11,"nodeType":"116","messageId":"117","endLine":55,"endColumn":21},{"ruleId":"130","severity":1,"message":"131","line":60,"column":29,"nodeType":"126","endLine":60,"endColumn":71},{"ruleId":"124","severity":1,"message":"127","line":74,"column":37,"nodeType":"126","endLine":80,"endColumn":39},{"ruleId":"124","severity":1,"message":"127","line":96,"column":37,"nodeType":"126","endLine":102,"endColumn":39},{"ruleId":"124","severity":1,"message":"127","line":118,"column":37,"nodeType":"126","endLine":124,"endColumn":39},{"ruleId":"124","severity":1,"message":"127","line":141,"column":37,"nodeType":"126","endLine":147,"endColumn":39},{"ruleId":"124","severity":1,"message":"132","line":163,"column":45,"nodeType":"126","endLine":164,"endColumn":47},{"ruleId":"124","severity":1,"message":"125","line":170,"column":37,"nodeType":"126","endLine":171,"endColumn":67},{"ruleId":"124","severity":1,"message":"128","line":180,"column":37,"nodeType":"126","endLine":182,"endColumn":39},{"ruleId":"114","severity":1,"message":"133","line":6,"column":10,"nodeType":"116","messageId":"117","endLine":6,"endColumn":16},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'CardText' is defined but never used.","Identifier","unusedVar","'CardBody' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'CardImgOverlay' is defined but never used.","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'DishDetail' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","'DISHES' is defined but never used.","no-global-assign","no-unsafe-negation"]