[{"E:\\dev\\coursera\\react\\coursera_project\\src\\index.js":"1","E:\\dev\\coursera\\react\\coursera_project\\src\\reportWebVitals.js":"2","E:\\dev\\coursera\\react\\coursera_project\\src\\App.js":"3","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\MenuComponent.jsx":"4","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\dishes.js":"5","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\MainComponent.js":"6","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\DishDetailComponent.js":"7","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\DishdetailComponent.js":"8","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\HeaderComponent.js":"9","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\FooterComponent.js":"10","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\HomeComponent.js":"11","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\ContactComponent.js":"12","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\comments.js":"13","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\promotions.js":"14","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\leaders.js":"15","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\AboutComponent.js":"16","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\configureStore.js":"17","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\dishes.js":"18","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\leaders.js":"19","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\promotions.js":"20","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\comments.js":"21","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\ActionTypes.js":"22","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\ActionCreators.js":"23","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\LoadingComponent.js":"24","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\forms.js":"25","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\baseUrl.js":"26"},{"size":308,"mtime":1611036546894,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"28"},{"size":556,"mtime":1611549708326,"results":"30","hashOfConfig":"28"},{"size":2029,"mtime":1612245151573,"results":"31","hashOfConfig":"28"},{"size":1614,"mtime":1611116357213,"results":"32","hashOfConfig":"28"},{"size":3517,"mtime":1612245118777,"results":"33","hashOfConfig":"28"},{"size":7061,"mtime":1612167297638,"results":"34","hashOfConfig":"28"},{"size":1710,"mtime":1611036205455,"results":"35","hashOfConfig":"28"},{"size":5153,"mtime":1611374095547,"results":"36","hashOfConfig":"28"},{"size":2806,"mtime":1611207816289,"results":"37","hashOfConfig":"28"},{"size":1523,"mtime":1612245078398,"results":"38","hashOfConfig":"28"},{"size":10787,"mtime":1611983652882,"results":"39","hashOfConfig":"28"},{"size":4927,"mtime":1611114539167,"results":"40","hashOfConfig":"28"},{"size":457,"mtime":1611114569496,"results":"41","hashOfConfig":"28"},{"size":2432,"mtime":1611114586647,"results":"42","hashOfConfig":"28"},{"size":4416,"mtime":1611214688339,"results":"43","hashOfConfig":"28"},{"size":835,"mtime":1611983283641,"results":"44","hashOfConfig":"28"},{"size":624,"mtime":1612245464956,"results":"45","hashOfConfig":"28"},{"size":184,"mtime":1611729690781,"results":"46","hashOfConfig":"28"},{"size":644,"mtime":1612245399995,"results":"47","hashOfConfig":"28"},{"size":792,"mtime":1612167954345,"results":"48","hashOfConfig":"28"},{"size":411,"mtime":1612245299641,"results":"49","hashOfConfig":"28"},{"size":1844,"mtime":1612245335670,"results":"50","hashOfConfig":"28"},{"size":256,"mtime":1611898428432,"results":"51","hashOfConfig":"28"},{"size":168,"mtime":1611983145823,"results":"52","hashOfConfig":"28"},{"size":48,"mtime":1612162007557,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1r3aw1x",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"E:\\dev\\coursera\\react\\coursera_project\\src\\index.js",[],["113","114"],"E:\\dev\\coursera\\react\\coursera_project\\src\\reportWebVitals.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\App.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\MenuComponent.jsx",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\dishes.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\MainComponent.js",["115"],"import React, { Component } from 'react';\r\nimport Menu from './MenuComponent';\r\nimport DishDetail from './DishDetailComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport Home from './HomeComponent';\r\nimport Contact from './ContactComponent';\r\nimport About from './AboutComponent';\r\n\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { addComment, fetchDishes, fetchComments, fetchPromos } from '../redux/ActionCreators';\r\nimport { actions } from 'react-redux-form';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        dishes: state.dishes,\r\n        comments: state.comments,\r\n        promotions: state.promotions,\r\n        leaders: state.leaders\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addComment: (dishId, rating, author, comment) => dispatch(addComment(dishId, rating, author, comment)),\r\n    fetchDishes: () => { dispatch(fetchDishes()) },\r\n    resetFeedbackForm: () => { dispatch(actions.reset('feedback')) },\r\n    fetchPromos: () => { dispatch(fetchPromos()) },\r\n    fetchComments: () => { dispatch(fetchComments()) },\r\n\r\n});\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchDishes();\r\n        this.props.fetchComments();\r\n        this.props.fetchPromos();\r\n    }\r\n\r\n    render() {\r\n        const HomePage = () => {\r\n            return (\r\n                <Home dish={this.props.dishes.dishes.filter(dish => dish.featured)[0]}\r\n                    dishesLoading={this.props.dishes.isLoading}\r\n                    dishesErrMess={this.props.dishes.errMess}\r\n                    promotion={this.props.promotions.promotions.filter(promo => promo.featured)[0]}\r\n                    promosLoading={this.props.promotions.isLoading}\r\n                    promosErrMess={this.props.promotions.errMess}\r\n                    leader={this.props.leaders.filter(leader => leader.featured)[0]}\r\n                />\r\n            );\r\n        }\r\n\r\n        const DishWithId = ({ match }) => {\r\n            return (\r\n                <DishDetail\r\n                    dish={this.props.dishes.dishes.filter(dish => dish.id === parseInt(match.params.dishId, 10))[0]}\r\n                    isLoading={this.props.dishes.isLoading}\r\n                    errMess={this.props.dishes.errMess}\r\n                    comments={this.props.comments.comments.filter(comment => comment.dishId === parseInt(match.params.dishId, 10))}\r\n                    commentsErrMess={this.props.comments.errMess}\r\n                    addComment={this.props.addComment}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <Switch>\r\n                    <Route path=\"/home\" component={HomePage} />\r\n                    <Route exact path=\"/menu\" component={() => <Menu dishes={this.props.dishes} />} />\r\n                    <Route path=\"/menu/:dishId\" component={DishWithId} />\r\n                    <Route exact path=\"/contactus\" component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} />} />\r\n                    <Route exact path=\"/aboutus\" component={() => <About leaders={this.props.leaders} />} />\r\n                    <Redirect to=\"/home\" />\r\n                </Switch>\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\DishDetailComponent.js",["116","117","118","119"],"import React, { Component } from 'react';\r\nimport {\r\n    Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem, Button,\r\n    Modal, ModalHeader, ModalBody, Row, Col, Label\r\n} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nfunction RenderDish({ dish }) {\r\n    return (\r\n        <Card>\r\n            <CardImg width=\"100%\" src={baseUrl + dish.image} alt={dish.name} />\r\n            <CardBody>\r\n                <CardTitle>{dish.name}</CardTitle>\r\n                <CardText>{dish.description}</CardText>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n\r\nfunction RenderComments({ comments, addComment, dishId }) {\r\n    var commentList = comments.map(comment => {\r\n        return (\r\n            <li key={comment.id} >\r\n                {comment.comment}\r\n                <br /><br />\r\n                    -- {comment.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(comment.date)))}\r\n                <br /><br />\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h4>Comments</h4>\r\n            <ul className=\"list-unstyled\">\r\n                {commentList}\r\n            </ul>\r\n            <CommentForm dishId={dishId} addComment={addComment} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DishDetail = props => {\r\n    if (props.isLoading) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.errMess) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.dish != null) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-5\">\r\n                        <RenderDish dish={props.dish} />\r\n                    </div>\r\n                    <div className=\"col-md-5\">\r\n                        <RenderComments comments={props.comments}\r\n                            addComment={props.addComment}\r\n                            dishId={props.dish.id} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DishDetail;\r\n\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\n\r\nexport class CommentForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({ isModalOpen: !this.state.isModalOpen });\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.toggleModal();\r\n\r\n        this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button outline onClick={this.toggleModal}>\r\n                    <span className=\"fa fa-pencil fa-lg\"> Submit comment</span>\r\n                </Button>\r\n\r\n                <div className=\"row row-content\">\r\n                    <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                        <ModalHeader toggle={this.toggleModal}> Submit comment</ModalHeader>\r\n                        <ModalBody>\r\n                            <div className=\"col-12 col-md-9\">\r\n                                <LocalForm onSubmit={(values) => this.handleSubmit(values)} >\r\n                                    <Row className=\"form-group\">\r\n                                        <Label htmlFor=\"rating\">Rating</Label>\r\n                                        <Col md={10}>\r\n                                            <Control.select model=\".rating\" name=\"rating\" className=\"form-control\" >\r\n                                                <option>1</option>\r\n                                                <option>2</option>\r\n                                                <option>3</option>\r\n                                                <option>4</option>\r\n                                                <option>5</option>\r\n                                            </Control.select>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Row className=\"form-group\">\r\n                                        <Label htmlFor=\"author\" md={2}>Your name</Label>\r\n                                        <Col md={10}>\r\n                                            <Control.text model=\".author\" id=\"author\" name=\"author\" placeholder=\"Author\" className=\"form-control\" validators={{ required, minLength: minLength(3), maxLength: maxLength(15) }} />\r\n                                            <Errors className=\"text-danger\" model=\".author\" show=\"touched\" messages={{ required: 'Required', minLength: 'Must be greater than 3 characters', maxLength: 'Must be 15 charaters or less' }} />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Row className=\"form-group\">\r\n                                        <Label htmlFor=\"feedback\" md={2}>Your feedback</Label>\r\n                                        <Col md={10}>\r\n                                            <Control.textarea model=\".message\" id=\"message\" name=\"message\" rows=\"6\" className=\"form-control\" validators={{ required }} />\r\n                                            <Errors className=\"text-danger\" model=\".message\" show=\"touched\" messages={{ required: 'Required' }} />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Button type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\r\n                                </LocalForm>\r\n                            </div>\r\n                        </ModalBody>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\DishdetailComponent.js",["120"],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\HeaderComponent.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\FooterComponent.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\HomeComponent.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\ContactComponent.js",["121","122","123","124","125","126","127","128","129"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Label, Col, Row } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, Form, Errors, actions } from 'react-redux-form';\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        console.log(\"Current state id:\" + JSON.stringify(values));\r\n        alert(\"Current state id:\" + JSON.stringify(values));\r\n        this.props.resetFeedbackForm();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb >\r\n                        <BreadcrumbItem><Link to='/Home'>Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>ContactUs</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>ContactUs</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send Us Your FeedBack</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 6, offset: 2 }}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" className=\"form-check-input\" name=\"agree\"\r\n                                            />{' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{ size: 3, offset: 1 }}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\" >\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"6\" placeholder=\"Message\" className=\"form-control\"\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 10, offset: 2 }}>\r\n                                    <Button type=\"submit\" color=\"primary\" >Send Feedback</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Contact;","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\comments.js",[],["130","131"],"E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\promotions.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\leaders.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\AboutComponent.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\configureStore.js",["132"],"import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { Dishes } from './dishes';\r\nimport { Leaders } from './leaders';\r\nimport { Comments } from './comments';\r\nimport { createForms } from 'react-redux-form';\r\nimport { Promotions } from './promotions';\r\nimport { DISHES } from '../shared/dishes';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport { initiaFeedback } from './forms';\r\n\r\nexport const configureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n            dishes: Dishes,\r\n            comments: Comments,\r\n            promotions: Promotions,\r\n            leaders: Leaders,\r\n            ...createForms({\r\n                feedback: initiaFeedback\r\n            })\r\n        }),\r\n        applyMiddleware(thunk, logger)\r\n    );\r\n    return store;\r\n}","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\dishes.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\leaders.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\promotions.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\comments.js",["133","134"],"import * as ActionTypes from './ActionTypes';\r\n\r\nexport const Comments = (state = {\r\n    errMess: null,\r\n    comments: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_COMMENTS:\r\n            return { ...state, isLoading: false, errMess: null, comments: action.payload };\r\n            return state.concat(comment);\r\n        case ActionTypes.COMMENTS_FAILED:\r\n            return { ...state, isLoading: false, errMess: action.payload, comments: [] };\r\n        case ActionTypes.ADD_COMMENT:\r\n            var comment = action.payLoad;\r\n            comment.id = state.comments.length;\r\n            comment.date = new Date().toISOString();\r\n            return { ...state, comments: state.comments.concat(comment) };\r\n        default:\r\n            return state;\r\n    }\r\n}","E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\ActionTypes.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\ActionCreators.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\LoadingComponent.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\redux\\forms.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\baseUrl.js",[],{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":34,"column":5,"nodeType":"141","messageId":"142","endLine":36,"endColumn":6},{"ruleId":"143","severity":1,"message":"144","line":3,"column":20,"nodeType":"145","messageId":"146","endLine":3,"endColumn":34},{"ruleId":"147","severity":1,"message":"148","line":144,"column":45,"nodeType":"149","endLine":144,"endColumn":117},{"ruleId":"147","severity":1,"message":"150","line":157,"column":45,"nodeType":"149","endLine":157,"endColumn":226},{"ruleId":"147","severity":1,"message":"151","line":165,"column":45,"nodeType":"149","endLine":165,"endColumn":170},{"ruleId":"143","severity":1,"message":"152","line":55,"column":11,"nodeType":"145","messageId":"146","endLine":55,"endColumn":21},{"ruleId":"143","severity":1,"message":"153","line":4,"column":33,"nodeType":"145","messageId":"146","endLine":4,"endColumn":40},{"ruleId":"154","severity":1,"message":"155","line":61,"column":29,"nodeType":"149","endLine":61,"endColumn":71},{"ruleId":"147","severity":1,"message":"150","line":75,"column":37,"nodeType":"149","endLine":81,"endColumn":39},{"ruleId":"147","severity":1,"message":"150","line":97,"column":37,"nodeType":"149","endLine":103,"endColumn":39},{"ruleId":"147","severity":1,"message":"150","line":119,"column":37,"nodeType":"149","endLine":125,"endColumn":39},{"ruleId":"147","severity":1,"message":"150","line":142,"column":37,"nodeType":"149","endLine":148,"endColumn":39},{"ruleId":"147","severity":1,"message":"156","line":164,"column":45,"nodeType":"149","endLine":165,"endColumn":47},{"ruleId":"147","severity":1,"message":"148","line":171,"column":37,"nodeType":"149","endLine":172,"endColumn":67},{"ruleId":"147","severity":1,"message":"151","line":181,"column":37,"nodeType":"149","endLine":183,"endColumn":39},{"ruleId":"135","replacedBy":"157"},{"ruleId":"137","replacedBy":"158"},{"ruleId":"143","severity":1,"message":"159","line":7,"column":10,"nodeType":"145","messageId":"146","endLine":7,"endColumn":16},{"ruleId":"160","severity":1,"message":"161","line":10,"column":13,"nodeType":"162","messageId":"163","endLine":10,"endColumn":42},{"ruleId":"164","severity":1,"message":"165","line":10,"column":33,"nodeType":"145","messageId":"166","endLine":10,"endColumn":40},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'CardImgOverlay' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'DishDetail' is assigned a value but never used.","'actions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["167"],["168"],"'DISHES' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-use-before-define","'comment' was used before it was defined.","usedBeforeDefined","no-global-assign","no-unsafe-negation"]