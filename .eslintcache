[{"E:\\dev\\coursera\\react\\coursera_project\\src\\index.js":"1","E:\\dev\\coursera\\react\\coursera_project\\src\\reportWebVitals.js":"2","E:\\dev\\coursera\\react\\coursera_project\\src\\App.js":"3","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\MenuComponent.jsx":"4","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\dishes.js":"5","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\MainComponent.js":"6","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\DishDetailComponent.js":"7","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\DishdetailComponent.js":"8","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\HeaderComponent.js":"9","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\FooterComponent.js":"10","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\HomeComponent.js":"11","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\ContactComponent.js":"12","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\comments.js":"13","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\promotions.js":"14","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\leaders.js":"15","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\AboutComponent.js":"16"},{"size":308,"mtime":1611036546894,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":361,"mtime":1611038789002,"results":"20","hashOfConfig":"18"},{"size":1380,"mtime":1611206008779,"results":"21","hashOfConfig":"18"},{"size":1614,"mtime":1611116357213,"results":"22","hashOfConfig":"18"},{"size":2308,"mtime":1611207914082,"results":"23","hashOfConfig":"18"},{"size":2233,"mtime":1611207140835,"results":"24","hashOfConfig":"18"},{"size":1710,"mtime":1611036205455,"results":"25","hashOfConfig":"18"},{"size":5153,"mtime":1611374095547,"results":"26","hashOfConfig":"18"},{"size":2806,"mtime":1611207816289,"results":"27","hashOfConfig":"18"},{"size":1121,"mtime":1611116726520,"results":"28","hashOfConfig":"18"},{"size":10866,"mtime":1611292813557,"results":"29","hashOfConfig":"18"},{"size":4927,"mtime":1611114539167,"results":"30","hashOfConfig":"18"},{"size":457,"mtime":1611114569496,"results":"31","hashOfConfig":"18"},{"size":2432,"mtime":1611114586647,"results":"32","hashOfConfig":"18"},{"size":4416,"mtime":1611214688339,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1r3aw1x",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"E:\\dev\\coursera\\react\\coursera_project\\src\\index.js",[],["70","71"],"E:\\dev\\coursera\\react\\coursera_project\\src\\reportWebVitals.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\App.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\MenuComponent.jsx",["72","73"],"import React from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction RenderMenuItem({ dish, onClick }) {\r\n    return (\r\n        <Card>\r\n            <Link to={`/menu/${dish.id}`}>\r\n                <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\r\n                <CardImgOverlay>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                </CardImgOverlay>\r\n            </Link>\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst Menu = props => {\r\n    const menu = props.dishes.map(dish => {\r\n        return (\r\n            <div key={dish.id} className=\"col-12 col-md-5 m-1\">\r\n                <RenderMenuItem dish={dish} />\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb >\r\n                    <BreadcrumbItem><Link to='/Home'>Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>Menu</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>Menu</h3>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                {menu}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Menu;","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\dishes.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\MainComponent.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\DishDetailComponent.js",["74"],"import React from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction RenderDish({ dish }) {\r\n    return (\r\n        <Card>\r\n            <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\r\n            <CardBody>\r\n                <CardTitle>{dish.name}</CardTitle>\r\n                <CardText>{dish.description}</CardText>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n\r\nfunction RenderComments({ comments }) {\r\n    var commentList = comments.map(comment => {\r\n        return (\r\n            <li key={comment.id} >\r\n                {comment.comment}\r\n                <br /><br />\r\n                    -- {comment.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(comment.date)))}\r\n                <br /><br />\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h4>Comments</h4>\r\n            <ul className=\"list-unstyled\">\r\n                {commentList}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DishDetail = props => {\r\n    if (props.dish) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-md-5 m-1\">\r\n                        <RenderDish dish={props.dish} />\r\n                    </div>\r\n                    <div className=\"col-12 col-md-5 m-1\">\r\n                        <RenderComments comments={props.comments} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DishDetail;","E:\\dev\\coursera\\react\\coursera_project\\src\\components\\DishdetailComponent.js",["75"],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\HeaderComponent.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\FooterComponent.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\HomeComponent.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\ContactComponent.js",["76"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            firstname: '',\r\n            lastname: '',\r\n            telnum: '',\r\n            email: '',\r\n            agree: false,\r\n            contactType: 'Tel',\r\n            message: '',\r\n            touched: {\r\n                firstname: false,\r\n                lastname: false,\r\n                telnum: false,\r\n                email: false\r\n            }\r\n        }\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.hanldeInputChange = this.hanldeInputChange.bind(this);\r\n        this.handleBlur = this.handleBlur.bind(this);\r\n    }\r\n\r\n    hanldeInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        console.log(\"Current state id:\" + JSON.stringify(this.state));\r\n        alert(\"Current state id:\" + JSON.stringify(this.state));\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleBlur = (field) => (evt) => {\r\n        this.setState({\r\n            touched: { ...this.state.touched, [field]: true }\r\n        });\r\n    }\r\n\r\n    validate(firstname, lastname, telnum, email) {\r\n        const errors = {\r\n            firstname: '',\r\n            lastname: '',\r\n            telnum: '',\r\n            email: ''\r\n        }\r\n\r\n        if (this.state.touched.firstname && firstname.length < 3)\r\n            errors.firstname = 'FirstName Should be >= 3 character';\r\n        else if (this.state.touched.firstname && firstname.length > 10)\r\n            errors.firstname = 'FirstName Should be <= 10 character';\r\n\r\n        if (this.state.touched.lastname && lastname.length < 3)\r\n            errors.lastname = 'LastName Should be >= 3 character';\r\n        else if (this.state.touched.lastname && lastname.length > 10)\r\n            errors.lastname = 'LastName Should be <= 10 character';\r\n\r\n        const reg = /^\\d+$/;\r\n        if (this.state.touched.telnum && !reg.test(telnum))\r\n            errors.telnum = 'Tel Num should contain only number';\r\n\r\n        if (this.state.touched.email && email.split('').filter(x => x === '@').length !== 1)\r\n            errors.email = 'email should contain an @ sign';\r\n\r\n        return errors;\r\n    }\r\n\r\n    render() {\r\n\r\n        const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email);\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb >\r\n                        <BreadcrumbItem><Link to='/Home'>Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>ContactUs</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>ContactUs</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send Us Your FeedBack</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\" value={this.state.firstname}\r\n                                        onChange={this.hanldeInputChange}\r\n                                        onBlur={this.handleBlur('firstname')}\r\n                                        valid={errors.firstname === ''}\r\n                                        invalid={errors.firstname !== ''} />\r\n                                    <FormFeedback>\r\n                                        {errors.firstname}\r\n                                    </FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\" value={this.state.lastname}\r\n                                        onChange={this.hanldeInputChange}\r\n                                        onBlur={this.handleBlur('lastname')}\r\n                                        valid={errors.lastname === ''}\r\n                                        invalid={errors.lastname !== ''} />\r\n                                    <FormFeedback>\r\n                                        {errors.lastname}\r\n                                    </FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"tel\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel Number\" value={this.state.telnum}\r\n                                        onChange={this.hanldeInputChange}\r\n                                        onBlur={this.handleBlur('telnum')}\r\n                                        valid={errors.telnum === ''}\r\n                                        invalid={errors.telnum !== ''} />\r\n                                    <FormFeedback>\r\n                                        {errors.telnum}\r\n                                    </FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\" value={this.state.email}\r\n                                        onChange={this.hanldeInputChange}\r\n                                        onBlur={this.handleBlur('email')}\r\n                                        valid={errors.email === ''}\r\n                                        invalid={errors.email !== ''} />\r\n                                    <FormFeedback>\r\n                                        {errors.email}\r\n                                    </FormFeedback>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{ size: 6, offset: 2 }}>\r\n                                    <FormGroup check>\r\n                                        <Label check>\r\n                                            <Input type=\"checkbox\" name=\"agree\" checked={this.state.agree}\r\n                                                onChange={this.hanldeInputChange} />{' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={{ size: 3, offset: 1 }}>\r\n                                    <Input type=\"select\" name=\"contactType\"\r\n                                        value={this.state.contactType} onChange={this.hanldeInputChange} >\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"textarea\" id=\"message\" name=\"message\"\r\n                                        rows=\"6\" placeholder=\"Message\" value={this.state.message}\r\n                                        onChange={this.hanldeInputChange} />\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{ size: 10, offset: 2 }}>\r\n                                    <Button type=\"submit\" color=\"primary\" >Send Feedback</Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Contact;","E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\comments.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\promotions.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\shared\\leaders.js",[],"E:\\dev\\coursera\\react\\coursera_project\\src\\components\\AboutComponent.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":2,"column":41,"nodeType":"83","messageId":"84","endLine":2,"endColumn":49},{"ruleId":"81","severity":1,"message":"85","line":2,"column":51,"nodeType":"83","messageId":"84","endLine":2,"endColumn":59},{"ruleId":"81","severity":1,"message":"86","line":2,"column":25,"nodeType":"83","messageId":"84","endLine":2,"endColumn":39},{"ruleId":"81","severity":1,"message":"87","line":55,"column":11,"nodeType":"83","messageId":"84","endLine":55,"endColumn":21},{"ruleId":"88","severity":1,"message":"89","line":118,"column":29,"nodeType":"90","endLine":118,"endColumn":71},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'CardText' is defined but never used.","Identifier","unusedVar","'CardBody' is defined but never used.","'CardImgOverlay' is defined but never used.","'DishDetail' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]